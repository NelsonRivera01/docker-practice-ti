name: Deploy 
on: 
  push: 
    branches: 
      - master

  workflow_dispatch:
env:
  SECRET_ENV_VAR: ${{ secrets.PRACTICE_SECRET }}
  MY_ENV_VAR: 'environment variable $SECRET_ENV_VAR'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Download repo
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Echo variable
        run: echo "MY_ENV_VAR is $MY_ENV_VAR"
      - name: run tests 
        id: test-step
        run: npm run test
        continue-on-error: false
      - name: Publish test result
        if: failure() && steps.test-step.outcome == 'failure'
        run: echo "Tests Failed"
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      icoName: ${{ steps.icoStep.outputs.ico }}
    steps:
      - name: Download repo
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: build project
        run: npm run build
      - name: Publish icon file name
        id: icoStep
        run: find build/*.ico -type f -execdir echo 'ico={}' >> $GITHUB_OUTPUT ';'
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            build
            README.md
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
      - name: list files
        run: ls
      - name: print icon name
        run: echo "${{ needs.build.outputs.icoName }}"
      - name: deploy
        run: echo "Deploying to production c:"
  Failure:
    needs: [test, build, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure
        run: echo "Deployment failed, please check the logs."
      - name: Send notification
        run: echo "Sending notification about failure"        

